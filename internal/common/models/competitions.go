// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Competition is an object representing the database table.
type Competition struct {
	ID         []byte      `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatedAt  null.Time   `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	DeletedAt  null.Time   `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`
	UpdatedAt  null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	CategoryID null.Bytes  `boil:"category_id" json:"category_id,omitempty" toml:"category_id" yaml:"category_id,omitempty"`
	Name       null.String `boil:"name" json:"name,omitempty" toml:"name" yaml:"name,omitempty"`

	R *competitionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L competitionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CompetitionColumns = struct {
	ID         string
	CreatedAt  string
	DeletedAt  string
	UpdatedAt  string
	CategoryID string
	Name       string
}{
	ID:         "id",
	CreatedAt:  "created_at",
	DeletedAt:  "deleted_at",
	UpdatedAt:  "updated_at",
	CategoryID: "category_id",
	Name:       "name",
}

var CompetitionTableColumns = struct {
	ID         string
	CreatedAt  string
	DeletedAt  string
	UpdatedAt  string
	CategoryID string
	Name       string
}{
	ID:         "competitions.id",
	CreatedAt:  "competitions.created_at",
	DeletedAt:  "competitions.deleted_at",
	UpdatedAt:  "competitions.updated_at",
	CategoryID: "competitions.category_id",
	Name:       "competitions.name",
}

// Generated where

type whereHelpernull_Bytes struct{ field string }

func (w whereHelpernull_Bytes) EQ(x null.Bytes) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Bytes) NEQ(x null.Bytes) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Bytes) LT(x null.Bytes) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Bytes) LTE(x null.Bytes) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Bytes) GT(x null.Bytes) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Bytes) GTE(x null.Bytes) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Bytes) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Bytes) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var CompetitionWhere = struct {
	ID         whereHelper__byte
	CreatedAt  whereHelpernull_Time
	DeletedAt  whereHelpernull_Time
	UpdatedAt  whereHelpernull_Time
	CategoryID whereHelpernull_Bytes
	Name       whereHelpernull_String
}{
	ID:         whereHelper__byte{field: "\"competitions\".\"id\""},
	CreatedAt:  whereHelpernull_Time{field: "\"competitions\".\"created_at\""},
	DeletedAt:  whereHelpernull_Time{field: "\"competitions\".\"deleted_at\""},
	UpdatedAt:  whereHelpernull_Time{field: "\"competitions\".\"updated_at\""},
	CategoryID: whereHelpernull_Bytes{field: "\"competitions\".\"category_id\""},
	Name:       whereHelpernull_String{field: "\"competitions\".\"name\""},
}

// CompetitionRels is where relationship names are stored.
var CompetitionRels = struct {
	Category string
}{
	Category: "Category",
}

// competitionR is where relationships are stored.
type competitionR struct {
	Category *CompetitionCategory `boil:"Category" json:"Category" toml:"Category" yaml:"Category"`
}

// NewStruct creates a new relationship struct
func (*competitionR) NewStruct() *competitionR {
	return &competitionR{}
}

func (r *competitionR) GetCategory() *CompetitionCategory {
	if r == nil {
		return nil
	}
	return r.Category
}

// competitionL is where Load methods for each relationship are stored.
type competitionL struct{}

var (
	competitionAllColumns            = []string{"id", "created_at", "deleted_at", "updated_at", "category_id", "name"}
	competitionColumnsWithoutDefault = []string{"id"}
	competitionColumnsWithDefault    = []string{"created_at", "deleted_at", "updated_at", "category_id", "name"}
	competitionPrimaryKeyColumns     = []string{"id"}
	competitionGeneratedColumns      = []string{}
)

type (
	// CompetitionSlice is an alias for a slice of pointers to Competition.
	// This should almost always be used instead of []Competition.
	CompetitionSlice []*Competition
	// CompetitionHook is the signature for custom Competition hook methods
	CompetitionHook func(context.Context, boil.ContextExecutor, *Competition) error

	competitionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	competitionType                 = reflect.TypeOf(&Competition{})
	competitionMapping              = queries.MakeStructMapping(competitionType)
	competitionPrimaryKeyMapping, _ = queries.BindMapping(competitionType, competitionMapping, competitionPrimaryKeyColumns)
	competitionInsertCacheMut       sync.RWMutex
	competitionInsertCache          = make(map[string]insertCache)
	competitionUpdateCacheMut       sync.RWMutex
	competitionUpdateCache          = make(map[string]updateCache)
	competitionUpsertCacheMut       sync.RWMutex
	competitionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var competitionAfterSelectMu sync.Mutex
var competitionAfterSelectHooks []CompetitionHook

var competitionBeforeInsertMu sync.Mutex
var competitionBeforeInsertHooks []CompetitionHook
var competitionAfterInsertMu sync.Mutex
var competitionAfterInsertHooks []CompetitionHook

var competitionBeforeUpdateMu sync.Mutex
var competitionBeforeUpdateHooks []CompetitionHook
var competitionAfterUpdateMu sync.Mutex
var competitionAfterUpdateHooks []CompetitionHook

var competitionBeforeDeleteMu sync.Mutex
var competitionBeforeDeleteHooks []CompetitionHook
var competitionAfterDeleteMu sync.Mutex
var competitionAfterDeleteHooks []CompetitionHook

var competitionBeforeUpsertMu sync.Mutex
var competitionBeforeUpsertHooks []CompetitionHook
var competitionAfterUpsertMu sync.Mutex
var competitionAfterUpsertHooks []CompetitionHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Competition) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range competitionAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Competition) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range competitionBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Competition) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range competitionAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Competition) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range competitionBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Competition) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range competitionAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Competition) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range competitionBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Competition) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range competitionAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Competition) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range competitionBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Competition) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range competitionAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCompetitionHook registers your hook function for all future operations.
func AddCompetitionHook(hookPoint boil.HookPoint, competitionHook CompetitionHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		competitionAfterSelectMu.Lock()
		competitionAfterSelectHooks = append(competitionAfterSelectHooks, competitionHook)
		competitionAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		competitionBeforeInsertMu.Lock()
		competitionBeforeInsertHooks = append(competitionBeforeInsertHooks, competitionHook)
		competitionBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		competitionAfterInsertMu.Lock()
		competitionAfterInsertHooks = append(competitionAfterInsertHooks, competitionHook)
		competitionAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		competitionBeforeUpdateMu.Lock()
		competitionBeforeUpdateHooks = append(competitionBeforeUpdateHooks, competitionHook)
		competitionBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		competitionAfterUpdateMu.Lock()
		competitionAfterUpdateHooks = append(competitionAfterUpdateHooks, competitionHook)
		competitionAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		competitionBeforeDeleteMu.Lock()
		competitionBeforeDeleteHooks = append(competitionBeforeDeleteHooks, competitionHook)
		competitionBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		competitionAfterDeleteMu.Lock()
		competitionAfterDeleteHooks = append(competitionAfterDeleteHooks, competitionHook)
		competitionAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		competitionBeforeUpsertMu.Lock()
		competitionBeforeUpsertHooks = append(competitionBeforeUpsertHooks, competitionHook)
		competitionBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		competitionAfterUpsertMu.Lock()
		competitionAfterUpsertHooks = append(competitionAfterUpsertHooks, competitionHook)
		competitionAfterUpsertMu.Unlock()
	}
}

// One returns a single competition record from the query.
func (q competitionQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Competition, error) {
	o := &Competition{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for competitions")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Competition records from the query.
func (q competitionQuery) All(ctx context.Context, exec boil.ContextExecutor) (CompetitionSlice, error) {
	var o []*Competition

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Competition slice")
	}

	if len(competitionAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Competition records in the query.
func (q competitionQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count competitions rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q competitionQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if competitions exists")
	}

	return count > 0, nil
}

// Category pointed to by the foreign key.
func (o *Competition) Category(mods ...qm.QueryMod) competitionCategoryQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.CategoryID),
	}

	queryMods = append(queryMods, mods...)

	return CompetitionCategories(queryMods...)
}

// LoadCategory allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (competitionL) LoadCategory(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCompetition interface{}, mods queries.Applicator) error {
	var slice []*Competition
	var object *Competition

	if singular {
		var ok bool
		object, ok = maybeCompetition.(*Competition)
		if !ok {
			object = new(Competition)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCompetition)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCompetition))
			}
		}
	} else {
		s, ok := maybeCompetition.(*[]*Competition)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCompetition)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCompetition))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &competitionR{}
		}
		if !queries.IsNil(object.CategoryID) {
			args[object.CategoryID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &competitionR{}
			}

			if !queries.IsNil(obj.CategoryID) {
				args[obj.CategoryID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`competition_categories`),
		qm.WhereIn(`competition_categories.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load CompetitionCategory")
	}

	var resultSlice []*CompetitionCategory
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice CompetitionCategory")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for competition_categories")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for competition_categories")
	}

	if len(competitionCategoryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Category = foreign
		if foreign.R == nil {
			foreign.R = &competitionCategoryR{}
		}
		foreign.R.CategoryCompetitions = append(foreign.R.CategoryCompetitions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.CategoryID, foreign.ID) {
				local.R.Category = foreign
				if foreign.R == nil {
					foreign.R = &competitionCategoryR{}
				}
				foreign.R.CategoryCompetitions = append(foreign.R.CategoryCompetitions, local)
				break
			}
		}
	}

	return nil
}

// SetCategory of the competition to the related item.
// Sets o.R.Category to related.
// Adds o to related.R.CategoryCompetitions.
func (o *Competition) SetCategory(ctx context.Context, exec boil.ContextExecutor, insert bool, related *CompetitionCategory) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"competitions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"category_id"}),
		strmangle.WhereClause("\"", "\"", 0, competitionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.CategoryID, related.ID)
	if o.R == nil {
		o.R = &competitionR{
			Category: related,
		}
	} else {
		o.R.Category = related
	}

	if related.R == nil {
		related.R = &competitionCategoryR{
			CategoryCompetitions: CompetitionSlice{o},
		}
	} else {
		related.R.CategoryCompetitions = append(related.R.CategoryCompetitions, o)
	}

	return nil
}

// RemoveCategory relationship.
// Sets o.R.Category to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Competition) RemoveCategory(ctx context.Context, exec boil.ContextExecutor, related *CompetitionCategory) error {
	var err error

	queries.SetScanner(&o.CategoryID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("category_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Category = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.CategoryCompetitions {
		if queries.Equal(o.CategoryID, ri.CategoryID) {
			continue
		}

		ln := len(related.R.CategoryCompetitions)
		if ln > 1 && i < ln-1 {
			related.R.CategoryCompetitions[i] = related.R.CategoryCompetitions[ln-1]
		}
		related.R.CategoryCompetitions = related.R.CategoryCompetitions[:ln-1]
		break
	}
	return nil
}

// Competitions retrieves all the records using an executor.
func Competitions(mods ...qm.QueryMod) competitionQuery {
	mods = append(mods, qm.From("\"competitions\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"competitions\".*"})
	}

	return competitionQuery{q}
}

// FindCompetition retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCompetition(ctx context.Context, exec boil.ContextExecutor, iD []byte, selectCols ...string) (*Competition, error) {
	competitionObj := &Competition{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"competitions\" where \"id\"=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, competitionObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from competitions")
	}

	if err = competitionObj.doAfterSelectHooks(ctx, exec); err != nil {
		return competitionObj, err
	}

	return competitionObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Competition) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no competitions provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(competitionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	competitionInsertCacheMut.RLock()
	cache, cached := competitionInsertCache[key]
	competitionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			competitionAllColumns,
			competitionColumnsWithDefault,
			competitionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(competitionType, competitionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(competitionType, competitionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"competitions\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"competitions\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into competitions")
	}

	if !cached {
		competitionInsertCacheMut.Lock()
		competitionInsertCache[key] = cache
		competitionInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Competition.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Competition) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	competitionUpdateCacheMut.RLock()
	cache, cached := competitionUpdateCache[key]
	competitionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			competitionAllColumns,
			competitionPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update competitions, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"competitions\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, competitionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(competitionType, competitionMapping, append(wl, competitionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update competitions row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for competitions")
	}

	if !cached {
		competitionUpdateCacheMut.Lock()
		competitionUpdateCache[key] = cache
		competitionUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q competitionQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for competitions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for competitions")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CompetitionSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), competitionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"competitions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, competitionPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in competition slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all competition")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Competition) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no competitions provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(competitionColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	competitionUpsertCacheMut.RLock()
	cache, cached := competitionUpsertCache[key]
	competitionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			competitionAllColumns,
			competitionColumnsWithDefault,
			competitionColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			competitionAllColumns,
			competitionPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert competitions, could not build update column list")
		}

		ret := strmangle.SetComplement(competitionAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(competitionPrimaryKeyColumns))
			copy(conflict, competitionPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"competitions\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(competitionType, competitionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(competitionType, competitionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert competitions")
	}

	if !cached {
		competitionUpsertCacheMut.Lock()
		competitionUpsertCache[key] = cache
		competitionUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Competition record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Competition) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Competition provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), competitionPrimaryKeyMapping)
	sql := "DELETE FROM \"competitions\" WHERE \"id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from competitions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for competitions")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q competitionQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no competitionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from competitions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for competitions")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CompetitionSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(competitionBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), competitionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"competitions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, competitionPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from competition slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for competitions")
	}

	if len(competitionAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Competition) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCompetition(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CompetitionSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CompetitionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), competitionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"competitions\".* FROM \"competitions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, competitionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CompetitionSlice")
	}

	*o = slice

	return nil
}

// CompetitionExists checks if the Competition row exists.
func CompetitionExists(ctx context.Context, exec boil.ContextExecutor, iD []byte) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"competitions\" where \"id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if competitions exists")
	}

	return exists, nil
}

// Exists checks if the Competition row exists.
func (o *Competition) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return CompetitionExists(ctx, exec, o.ID)
}
