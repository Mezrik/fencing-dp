// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// CompetitionCategory is an object representing the database table.
type CompetitionCategory struct {
	ID        []byte      `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatedAt null.Time   `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	DeletedAt null.Time   `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`
	UpdatedAt null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	Name      null.String `boil:"name" json:"name,omitempty" toml:"name" yaml:"name,omitempty"`

	R *competitionCategoryR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L competitionCategoryL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CompetitionCategoryColumns = struct {
	ID        string
	CreatedAt string
	DeletedAt string
	UpdatedAt string
	Name      string
}{
	ID:        "id",
	CreatedAt: "created_at",
	DeletedAt: "deleted_at",
	UpdatedAt: "updated_at",
	Name:      "name",
}

var CompetitionCategoryTableColumns = struct {
	ID        string
	CreatedAt string
	DeletedAt string
	UpdatedAt string
	Name      string
}{
	ID:        "competition_categories.id",
	CreatedAt: "competition_categories.created_at",
	DeletedAt: "competition_categories.deleted_at",
	UpdatedAt: "competition_categories.updated_at",
	Name:      "competition_categories.name",
}

// Generated where

type whereHelper__byte struct{ field string }

func (w whereHelper__byte) EQ(x []byte) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelper__byte) NEQ(x []byte) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelper__byte) LT(x []byte) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelper__byte) LTE(x []byte) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelper__byte) GT(x []byte) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelper__byte) GTE(x []byte) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

type whereHelpernull_Time struct{ field string }

func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Time) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Time) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_String) LIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" LIKE ?", x)
}
func (w whereHelpernull_String) NLIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT LIKE ?", x)
}
func (w whereHelpernull_String) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_String) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var CompetitionCategoryWhere = struct {
	ID        whereHelper__byte
	CreatedAt whereHelpernull_Time
	DeletedAt whereHelpernull_Time
	UpdatedAt whereHelpernull_Time
	Name      whereHelpernull_String
}{
	ID:        whereHelper__byte{field: "\"competition_categories\".\"id\""},
	CreatedAt: whereHelpernull_Time{field: "\"competition_categories\".\"created_at\""},
	DeletedAt: whereHelpernull_Time{field: "\"competition_categories\".\"deleted_at\""},
	UpdatedAt: whereHelpernull_Time{field: "\"competition_categories\".\"updated_at\""},
	Name:      whereHelpernull_String{field: "\"competition_categories\".\"name\""},
}

// CompetitionCategoryRels is where relationship names are stored.
var CompetitionCategoryRels = struct {
	CategoryCompetitions string
}{
	CategoryCompetitions: "CategoryCompetitions",
}

// competitionCategoryR is where relationships are stored.
type competitionCategoryR struct {
	CategoryCompetitions CompetitionSlice `boil:"CategoryCompetitions" json:"CategoryCompetitions" toml:"CategoryCompetitions" yaml:"CategoryCompetitions"`
}

// NewStruct creates a new relationship struct
func (*competitionCategoryR) NewStruct() *competitionCategoryR {
	return &competitionCategoryR{}
}

func (r *competitionCategoryR) GetCategoryCompetitions() CompetitionSlice {
	if r == nil {
		return nil
	}
	return r.CategoryCompetitions
}

// competitionCategoryL is where Load methods for each relationship are stored.
type competitionCategoryL struct{}

var (
	competitionCategoryAllColumns            = []string{"id", "created_at", "deleted_at", "updated_at", "name"}
	competitionCategoryColumnsWithoutDefault = []string{"id"}
	competitionCategoryColumnsWithDefault    = []string{"created_at", "deleted_at", "updated_at", "name"}
	competitionCategoryPrimaryKeyColumns     = []string{"id"}
	competitionCategoryGeneratedColumns      = []string{}
)

type (
	// CompetitionCategorySlice is an alias for a slice of pointers to CompetitionCategory.
	// This should almost always be used instead of []CompetitionCategory.
	CompetitionCategorySlice []*CompetitionCategory
	// CompetitionCategoryHook is the signature for custom CompetitionCategory hook methods
	CompetitionCategoryHook func(context.Context, boil.ContextExecutor, *CompetitionCategory) error

	competitionCategoryQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	competitionCategoryType                 = reflect.TypeOf(&CompetitionCategory{})
	competitionCategoryMapping              = queries.MakeStructMapping(competitionCategoryType)
	competitionCategoryPrimaryKeyMapping, _ = queries.BindMapping(competitionCategoryType, competitionCategoryMapping, competitionCategoryPrimaryKeyColumns)
	competitionCategoryInsertCacheMut       sync.RWMutex
	competitionCategoryInsertCache          = make(map[string]insertCache)
	competitionCategoryUpdateCacheMut       sync.RWMutex
	competitionCategoryUpdateCache          = make(map[string]updateCache)
	competitionCategoryUpsertCacheMut       sync.RWMutex
	competitionCategoryUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var competitionCategoryAfterSelectMu sync.Mutex
var competitionCategoryAfterSelectHooks []CompetitionCategoryHook

var competitionCategoryBeforeInsertMu sync.Mutex
var competitionCategoryBeforeInsertHooks []CompetitionCategoryHook
var competitionCategoryAfterInsertMu sync.Mutex
var competitionCategoryAfterInsertHooks []CompetitionCategoryHook

var competitionCategoryBeforeUpdateMu sync.Mutex
var competitionCategoryBeforeUpdateHooks []CompetitionCategoryHook
var competitionCategoryAfterUpdateMu sync.Mutex
var competitionCategoryAfterUpdateHooks []CompetitionCategoryHook

var competitionCategoryBeforeDeleteMu sync.Mutex
var competitionCategoryBeforeDeleteHooks []CompetitionCategoryHook
var competitionCategoryAfterDeleteMu sync.Mutex
var competitionCategoryAfterDeleteHooks []CompetitionCategoryHook

var competitionCategoryBeforeUpsertMu sync.Mutex
var competitionCategoryBeforeUpsertHooks []CompetitionCategoryHook
var competitionCategoryAfterUpsertMu sync.Mutex
var competitionCategoryAfterUpsertHooks []CompetitionCategoryHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *CompetitionCategory) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range competitionCategoryAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *CompetitionCategory) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range competitionCategoryBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *CompetitionCategory) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range competitionCategoryAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *CompetitionCategory) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range competitionCategoryBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *CompetitionCategory) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range competitionCategoryAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *CompetitionCategory) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range competitionCategoryBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *CompetitionCategory) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range competitionCategoryAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *CompetitionCategory) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range competitionCategoryBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *CompetitionCategory) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range competitionCategoryAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCompetitionCategoryHook registers your hook function for all future operations.
func AddCompetitionCategoryHook(hookPoint boil.HookPoint, competitionCategoryHook CompetitionCategoryHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		competitionCategoryAfterSelectMu.Lock()
		competitionCategoryAfterSelectHooks = append(competitionCategoryAfterSelectHooks, competitionCategoryHook)
		competitionCategoryAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		competitionCategoryBeforeInsertMu.Lock()
		competitionCategoryBeforeInsertHooks = append(competitionCategoryBeforeInsertHooks, competitionCategoryHook)
		competitionCategoryBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		competitionCategoryAfterInsertMu.Lock()
		competitionCategoryAfterInsertHooks = append(competitionCategoryAfterInsertHooks, competitionCategoryHook)
		competitionCategoryAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		competitionCategoryBeforeUpdateMu.Lock()
		competitionCategoryBeforeUpdateHooks = append(competitionCategoryBeforeUpdateHooks, competitionCategoryHook)
		competitionCategoryBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		competitionCategoryAfterUpdateMu.Lock()
		competitionCategoryAfterUpdateHooks = append(competitionCategoryAfterUpdateHooks, competitionCategoryHook)
		competitionCategoryAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		competitionCategoryBeforeDeleteMu.Lock()
		competitionCategoryBeforeDeleteHooks = append(competitionCategoryBeforeDeleteHooks, competitionCategoryHook)
		competitionCategoryBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		competitionCategoryAfterDeleteMu.Lock()
		competitionCategoryAfterDeleteHooks = append(competitionCategoryAfterDeleteHooks, competitionCategoryHook)
		competitionCategoryAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		competitionCategoryBeforeUpsertMu.Lock()
		competitionCategoryBeforeUpsertHooks = append(competitionCategoryBeforeUpsertHooks, competitionCategoryHook)
		competitionCategoryBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		competitionCategoryAfterUpsertMu.Lock()
		competitionCategoryAfterUpsertHooks = append(competitionCategoryAfterUpsertHooks, competitionCategoryHook)
		competitionCategoryAfterUpsertMu.Unlock()
	}
}

// One returns a single competitionCategory record from the query.
func (q competitionCategoryQuery) One(ctx context.Context, exec boil.ContextExecutor) (*CompetitionCategory, error) {
	o := &CompetitionCategory{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for competition_categories")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all CompetitionCategory records from the query.
func (q competitionCategoryQuery) All(ctx context.Context, exec boil.ContextExecutor) (CompetitionCategorySlice, error) {
	var o []*CompetitionCategory

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to CompetitionCategory slice")
	}

	if len(competitionCategoryAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all CompetitionCategory records in the query.
func (q competitionCategoryQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count competition_categories rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q competitionCategoryQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if competition_categories exists")
	}

	return count > 0, nil
}

// CategoryCompetitions retrieves all the competition's Competitions with an executor via category_id column.
func (o *CompetitionCategory) CategoryCompetitions(mods ...qm.QueryMod) competitionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"competitions\".\"category_id\"=?", o.ID),
	)

	return Competitions(queryMods...)
}

// LoadCategoryCompetitions allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (competitionCategoryL) LoadCategoryCompetitions(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCompetitionCategory interface{}, mods queries.Applicator) error {
	var slice []*CompetitionCategory
	var object *CompetitionCategory

	if singular {
		var ok bool
		object, ok = maybeCompetitionCategory.(*CompetitionCategory)
		if !ok {
			object = new(CompetitionCategory)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCompetitionCategory)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCompetitionCategory))
			}
		}
	} else {
		s, ok := maybeCompetitionCategory.(*[]*CompetitionCategory)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCompetitionCategory)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCompetitionCategory))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &competitionCategoryR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &competitionCategoryR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`competitions`),
		qm.WhereIn(`competitions.category_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load competitions")
	}

	var resultSlice []*Competition
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice competitions")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on competitions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for competitions")
	}

	if len(competitionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.CategoryCompetitions = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &competitionR{}
			}
			foreign.R.Category = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.CategoryID) {
				local.R.CategoryCompetitions = append(local.R.CategoryCompetitions, foreign)
				if foreign.R == nil {
					foreign.R = &competitionR{}
				}
				foreign.R.Category = local
				break
			}
		}
	}

	return nil
}

// AddCategoryCompetitions adds the given related objects to the existing relationships
// of the competition_category, optionally inserting them as new records.
// Appends related to o.R.CategoryCompetitions.
// Sets related.R.Category appropriately.
func (o *CompetitionCategory) AddCategoryCompetitions(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Competition) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.CategoryID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"competitions\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 0, []string{"category_id"}),
				strmangle.WhereClause("\"", "\"", 0, competitionPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.CategoryID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &competitionCategoryR{
			CategoryCompetitions: related,
		}
	} else {
		o.R.CategoryCompetitions = append(o.R.CategoryCompetitions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &competitionR{
				Category: o,
			}
		} else {
			rel.R.Category = o
		}
	}
	return nil
}

// SetCategoryCompetitions removes all previously related items of the
// competition_category replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Category's CategoryCompetitions accordingly.
// Replaces o.R.CategoryCompetitions with related.
// Sets related.R.Category's CategoryCompetitions accordingly.
func (o *CompetitionCategory) SetCategoryCompetitions(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Competition) error {
	query := "update \"competitions\" set \"category_id\" = null where \"category_id\" = ?"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.CategoryCompetitions {
			queries.SetScanner(&rel.CategoryID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Category = nil
		}
		o.R.CategoryCompetitions = nil
	}

	return o.AddCategoryCompetitions(ctx, exec, insert, related...)
}

// RemoveCategoryCompetitions relationships from objects passed in.
// Removes related items from R.CategoryCompetitions (uses pointer comparison, removal does not keep order)
// Sets related.R.Category.
func (o *CompetitionCategory) RemoveCategoryCompetitions(ctx context.Context, exec boil.ContextExecutor, related ...*Competition) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.CategoryID, nil)
		if rel.R != nil {
			rel.R.Category = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("category_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.CategoryCompetitions {
			if rel != ri {
				continue
			}

			ln := len(o.R.CategoryCompetitions)
			if ln > 1 && i < ln-1 {
				o.R.CategoryCompetitions[i] = o.R.CategoryCompetitions[ln-1]
			}
			o.R.CategoryCompetitions = o.R.CategoryCompetitions[:ln-1]
			break
		}
	}

	return nil
}

// CompetitionCategories retrieves all the records using an executor.
func CompetitionCategories(mods ...qm.QueryMod) competitionCategoryQuery {
	mods = append(mods, qm.From("\"competition_categories\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"competition_categories\".*"})
	}

	return competitionCategoryQuery{q}
}

// FindCompetitionCategory retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCompetitionCategory(ctx context.Context, exec boil.ContextExecutor, iD []byte, selectCols ...string) (*CompetitionCategory, error) {
	competitionCategoryObj := &CompetitionCategory{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"competition_categories\" where \"id\"=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, competitionCategoryObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from competition_categories")
	}

	if err = competitionCategoryObj.doAfterSelectHooks(ctx, exec); err != nil {
		return competitionCategoryObj, err
	}

	return competitionCategoryObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CompetitionCategory) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no competition_categories provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(competitionCategoryColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	competitionCategoryInsertCacheMut.RLock()
	cache, cached := competitionCategoryInsertCache[key]
	competitionCategoryInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			competitionCategoryAllColumns,
			competitionCategoryColumnsWithDefault,
			competitionCategoryColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(competitionCategoryType, competitionCategoryMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(competitionCategoryType, competitionCategoryMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"competition_categories\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"competition_categories\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into competition_categories")
	}

	if !cached {
		competitionCategoryInsertCacheMut.Lock()
		competitionCategoryInsertCache[key] = cache
		competitionCategoryInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the CompetitionCategory.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CompetitionCategory) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	competitionCategoryUpdateCacheMut.RLock()
	cache, cached := competitionCategoryUpdateCache[key]
	competitionCategoryUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			competitionCategoryAllColumns,
			competitionCategoryPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update competition_categories, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"competition_categories\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, competitionCategoryPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(competitionCategoryType, competitionCategoryMapping, append(wl, competitionCategoryPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update competition_categories row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for competition_categories")
	}

	if !cached {
		competitionCategoryUpdateCacheMut.Lock()
		competitionCategoryUpdateCache[key] = cache
		competitionCategoryUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q competitionCategoryQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for competition_categories")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for competition_categories")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CompetitionCategorySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), competitionCategoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"competition_categories\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, competitionCategoryPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in competitionCategory slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all competitionCategory")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CompetitionCategory) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no competition_categories provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(competitionCategoryColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	competitionCategoryUpsertCacheMut.RLock()
	cache, cached := competitionCategoryUpsertCache[key]
	competitionCategoryUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			competitionCategoryAllColumns,
			competitionCategoryColumnsWithDefault,
			competitionCategoryColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			competitionCategoryAllColumns,
			competitionCategoryPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert competition_categories, could not build update column list")
		}

		ret := strmangle.SetComplement(competitionCategoryAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(competitionCategoryPrimaryKeyColumns))
			copy(conflict, competitionCategoryPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"competition_categories\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(competitionCategoryType, competitionCategoryMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(competitionCategoryType, competitionCategoryMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert competition_categories")
	}

	if !cached {
		competitionCategoryUpsertCacheMut.Lock()
		competitionCategoryUpsertCache[key] = cache
		competitionCategoryUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single CompetitionCategory record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CompetitionCategory) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no CompetitionCategory provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), competitionCategoryPrimaryKeyMapping)
	sql := "DELETE FROM \"competition_categories\" WHERE \"id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from competition_categories")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for competition_categories")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q competitionCategoryQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no competitionCategoryQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from competition_categories")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for competition_categories")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CompetitionCategorySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(competitionCategoryBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), competitionCategoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"competition_categories\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, competitionCategoryPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from competitionCategory slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for competition_categories")
	}

	if len(competitionCategoryAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CompetitionCategory) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCompetitionCategory(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CompetitionCategorySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CompetitionCategorySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), competitionCategoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"competition_categories\".* FROM \"competition_categories\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, competitionCategoryPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CompetitionCategorySlice")
	}

	*o = slice

	return nil
}

// CompetitionCategoryExists checks if the CompetitionCategory row exists.
func CompetitionCategoryExists(ctx context.Context, exec boil.ContextExecutor, iD []byte) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"competition_categories\" where \"id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if competition_categories exists")
	}

	return exists, nil
}

// Exists checks if the CompetitionCategory row exists.
func (o *CompetitionCategory) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return CompetitionCategoryExists(ctx, exec, o.ID)
}
