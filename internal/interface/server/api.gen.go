// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package server

import (
	"fmt"
	"net/http"

	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for CompetitionTypeEnum.
const (
	International CompetitionTypeEnum = "international"
	National      CompetitionTypeEnum = "national"
)

// Defines values for GenderEnum.
const (
	Female GenderEnum = "female"
	Male   GenderEnum = "male"
	Mixed  GenderEnum = "mixed"
)

// Defines values for MatchChangeEnum.
const (
	FightStart      MatchChangeEnum = "fight_start"
	FightStop       MatchChangeEnum = "fight_stop"
	MatchEnd        MatchChangeEnum = "match_end"
	MatchStart      MatchChangeEnum = "match_start"
	PointAdded      MatchChangeEnum = "point_added"
	PointSubtracted MatchChangeEnum = "point_subtracted"
)

// AssignCompetitorRequest defines model for AssignCompetitorRequest.
type AssignCompetitorRequest struct {
	CompetitionId openapi_types.UUID `json:"competitionId"`
	CompetitorId  openapi_types.UUID `json:"competitorId"`
}

// ClubResult defines model for ClubResult.
type ClubResult struct {
	Id   openapi_types.UUID `json:"id"`
	Name string             `json:"name"`
}

// CompetitionCategoryResult defines model for CompetitionCategoryResult.
type CompetitionCategoryResult struct {
	Id   openapi_types.UUID `json:"id"`
	Name string             `json:"name"`
}

// CompetitionGroup defines model for CompetitionGroup.
type CompetitionGroup struct {
	CompetitionId openapi_types.UUID `json:"competitionId"`
	Id            openapi_types.UUID `json:"id"`
	Name          string             `json:"name"`
	PisteNumber   *int               `json:"pisteNumber,omitempty"`
}

// CompetitionParticipant defines model for CompetitionParticipant.
type CompetitionParticipant struct {
	CompetitionId    openapi_types.UUID  `json:"competitionId"`
	Competitor       CompetitorResult    `json:"competitor"`
	DeploymentNumber *int                `json:"deploymentNumber,omitempty"`
	GroupId          *openapi_types.UUID `json:"groupId,omitempty"`
	Points           *float32            `json:"points,omitempty"`
	StartingPosition *int                `json:"startingPosition,omitempty"`
}

// CompetitionResult defines model for CompetitionResult.
type CompetitionResult struct {
	Category        CompetitionCategoryResult `json:"category"`
	CompetitionType CompetitionTypeEnum       `json:"competitionType"`
	Date            string                    `json:"date"`
	FederationName  string                    `json:"federationName"`
	Gender          GenderEnum                `json:"gender"`
	Id              openapi_types.UUID        `json:"id"`
	Name            string                    `json:"name"`
	OrganizerName   string                    `json:"organizerName"`
	Weapon          WeaponResult              `json:"weapon"`
}

// CompetitionTypeEnum defines model for CompetitionTypeEnum.
type CompetitionTypeEnum string

// CompetitorResult defines model for CompetitorResult.
type CompetitorResult struct {
	Birthdate      *string            `json:"birthdate,omitempty"`
	Club           *ClubResult        `json:"club,omitempty"`
	Firstname      string             `json:"firstname"`
	Gender         GenderEnum         `json:"gender"`
	HasMissingInfo *bool              `json:"hasMissingInfo,omitempty"`
	Id             openapi_types.UUID `json:"id"`
	License        *string            `json:"license,omitempty"`
	LicenseFie     *string            `json:"licenseFie,omitempty"`
	Surname        string             `json:"surname"`
}

// CreateCompetitionCommand defines model for CreateCompetitionCommand.
type CreateCompetitionCommand struct {
	CategoryId      openapi_types.UUID  `json:"categoryId"`
	CompetitionType CompetitionTypeEnum `json:"competitionType"`
	Date            string              `json:"date"`
	FederationName  string              `json:"federationName"`
	Gender          GenderEnum          `json:"gender"`
	Name            string              `json:"name"`
	OrganizerName   string              `json:"organizerName"`
	WeaponId        openapi_types.UUID  `json:"weaponId"`
}

// CreateCompetitorCommand defines model for CreateCompetitorCommand.
type CreateCompetitorCommand struct {
	Birthdate  string              `json:"birthdate"`
	ClubId     *openapi_types.UUID `json:"clubId,omitempty"`
	Firstname  string              `json:"firstname"`
	Gender     GenderEnum          `json:"gender"`
	License    string              `json:"license"`
	LicenseFie *string             `json:"licenseFie,omitempty"`
	Surname    string              `json:"surname"`
}

// GenderEnum defines model for GenderEnum.
type GenderEnum string

// Match defines model for Match.
type Match struct {
	GroupId          openapi_types.UUID `json:"groupId"`
	Id               openapi_types.UUID `json:"id"`
	ParticipantOneId openapi_types.UUID `json:"participantOneId"`
	ParticipantTwoId openapi_types.UUID `json:"participantTwoId"`
}

// MatchChangeEnum defines model for MatchChangeEnum.
type MatchChangeEnum string

// MatchDetail defines model for MatchDetail.
type MatchDetail struct {
	GroupId          openapi_types.UUID `json:"groupId"`
	Id               openapi_types.UUID `json:"id"`
	ParticipantOneId openapi_types.UUID `json:"participantOneId"`
	ParticipantTwoId openapi_types.UUID `json:"participantTwoId"`
	State            []MatchStateItem   `json:"state"`
}

// MatchStateItem defines model for MatchStateItem.
type MatchStateItem struct {
	Change  MatchChangeEnum     `json:"change"`
	Id      openapi_types.UUID  `json:"id"`
	PointTo *openapi_types.UUID `json:"pointTo,omitempty"`
}

// UpdateCompetitorCommand defines model for UpdateCompetitorCommand.
type UpdateCompetitorCommand struct {
	Birthdate  string              `json:"birthdate"`
	ClubId     *openapi_types.UUID `json:"clubId,omitempty"`
	Firstname  string              `json:"firstname"`
	Gender     GenderEnum          `json:"gender"`
	License    string              `json:"license"`
	LicenseFie *string             `json:"licenseFie,omitempty"`
	Surname    string              `json:"surname"`
}

// WeaponResult defines model for WeaponResult.
type WeaponResult struct {
	Id   openapi_types.UUID `json:"id"`
	Name string             `json:"name"`
}

// PostCompetitorsImportMultipartBody defines parameters for PostCompetitorsImport.
type PostCompetitorsImportMultipartBody struct {
	// File The CSV file to upload.
	File *openapi_types.File `json:"file,omitempty"`
}

// PostCompetitionsJSONRequestBody defines body for PostCompetitions for application/json ContentType.
type PostCompetitionsJSONRequestBody = CreateCompetitionCommand

// PostCompetitorsJSONRequestBody defines body for PostCompetitors for application/json ContentType.
type PostCompetitorsJSONRequestBody = CreateCompetitorCommand

// PostCompetitorsAssignParticipantJSONRequestBody defines body for PostCompetitorsAssignParticipant for application/json ContentType.
type PostCompetitorsAssignParticipantJSONRequestBody = AssignCompetitorRequest

// PostCompetitorsImportMultipartRequestBody defines body for PostCompetitorsImport for multipart/form-data ContentType.
type PostCompetitorsImportMultipartRequestBody PostCompetitorsImportMultipartBody

// PutCompetitorsCompetitorIdJSONRequestBody defines body for PutCompetitorsCompetitorId for application/json ContentType.
type PutCompetitorsCompetitorIdJSONRequestBody = UpdateCompetitorCommand

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /competitions)
	GetCompetitions(w http.ResponseWriter, r *http.Request)

	// (POST /competitions)
	PostCompetitions(w http.ResponseWriter, r *http.Request)

	// (GET /competitions/categories)
	GetCompetitionsCategories(w http.ResponseWriter, r *http.Request)

	// (GET /competitions/weapons)
	GetCompetitionsWeapons(w http.ResponseWriter, r *http.Request)

	// (GET /competitions/{competitionId})
	GetCompetitionsCompetitionId(w http.ResponseWriter, r *http.Request, competitionId openapi_types.UUID)

	// (GET /competitions/{competitionId}/groups)
	GetCompetitionsCompetitionIdGroups(w http.ResponseWriter, r *http.Request, competitionId openapi_types.UUID)

	// (GET /competitions/{competitionId}/groups/{groupId})
	GetCompetitionsCompetitionIdGroupsGroupId(w http.ResponseWriter, r *http.Request, competitionId openapi_types.UUID, groupId openapi_types.UUID)

	// (GET /competitors)
	GetCompetitors(w http.ResponseWriter, r *http.Request)

	// (POST /competitors)
	PostCompetitors(w http.ResponseWriter, r *http.Request)

	// (GET /competitors/all/{competitionId})
	GetCompetitorsAllCompetitionId(w http.ResponseWriter, r *http.Request, competitionId openapi_types.UUID)

	// (POST /competitors/assign-participant)
	PostCompetitorsAssignParticipant(w http.ResponseWriter, r *http.Request)

	// (POST /competitors/import)
	PostCompetitorsImport(w http.ResponseWriter, r *http.Request)

	// (PUT /competitors/{competitorId})
	PutCompetitorsCompetitorId(w http.ResponseWriter, r *http.Request, competitorId openapi_types.UUID)

	// (GET /matches/{groupId}/all)
	GetMatchesGroupIdAll(w http.ResponseWriter, r *http.Request, groupId openapi_types.UUID)

	// (GET /matches/{matchId})
	GetMatchesMatchId(w http.ResponseWriter, r *http.Request, matchId openapi_types.UUID)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// (GET /competitions)
func (_ Unimplemented) GetCompetitions(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /competitions)
func (_ Unimplemented) PostCompetitions(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /competitions/categories)
func (_ Unimplemented) GetCompetitionsCategories(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /competitions/weapons)
func (_ Unimplemented) GetCompetitionsWeapons(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /competitions/{competitionId})
func (_ Unimplemented) GetCompetitionsCompetitionId(w http.ResponseWriter, r *http.Request, competitionId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /competitions/{competitionId}/groups)
func (_ Unimplemented) GetCompetitionsCompetitionIdGroups(w http.ResponseWriter, r *http.Request, competitionId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /competitions/{competitionId}/groups/{groupId})
func (_ Unimplemented) GetCompetitionsCompetitionIdGroupsGroupId(w http.ResponseWriter, r *http.Request, competitionId openapi_types.UUID, groupId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /competitors)
func (_ Unimplemented) GetCompetitors(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /competitors)
func (_ Unimplemented) PostCompetitors(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /competitors/all/{competitionId})
func (_ Unimplemented) GetCompetitorsAllCompetitionId(w http.ResponseWriter, r *http.Request, competitionId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /competitors/assign-participant)
func (_ Unimplemented) PostCompetitorsAssignParticipant(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /competitors/import)
func (_ Unimplemented) PostCompetitorsImport(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (PUT /competitors/{competitorId})
func (_ Unimplemented) PutCompetitorsCompetitorId(w http.ResponseWriter, r *http.Request, competitorId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /matches/{groupId}/all)
func (_ Unimplemented) GetMatchesGroupIdAll(w http.ResponseWriter, r *http.Request, groupId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /matches/{matchId})
func (_ Unimplemented) GetMatchesMatchId(w http.ResponseWriter, r *http.Request, matchId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetCompetitions operation middleware
func (siw *ServerInterfaceWrapper) GetCompetitions(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCompetitions(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostCompetitions operation middleware
func (siw *ServerInterfaceWrapper) PostCompetitions(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostCompetitions(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetCompetitionsCategories operation middleware
func (siw *ServerInterfaceWrapper) GetCompetitionsCategories(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCompetitionsCategories(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetCompetitionsWeapons operation middleware
func (siw *ServerInterfaceWrapper) GetCompetitionsWeapons(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCompetitionsWeapons(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetCompetitionsCompetitionId operation middleware
func (siw *ServerInterfaceWrapper) GetCompetitionsCompetitionId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "competitionId" -------------
	var competitionId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "competitionId", chi.URLParam(r, "competitionId"), &competitionId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "competitionId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCompetitionsCompetitionId(w, r, competitionId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetCompetitionsCompetitionIdGroups operation middleware
func (siw *ServerInterfaceWrapper) GetCompetitionsCompetitionIdGroups(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "competitionId" -------------
	var competitionId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "competitionId", chi.URLParam(r, "competitionId"), &competitionId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "competitionId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCompetitionsCompetitionIdGroups(w, r, competitionId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetCompetitionsCompetitionIdGroupsGroupId operation middleware
func (siw *ServerInterfaceWrapper) GetCompetitionsCompetitionIdGroupsGroupId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "competitionId" -------------
	var competitionId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "competitionId", chi.URLParam(r, "competitionId"), &competitionId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "competitionId", Err: err})
		return
	}

	// ------------- Path parameter "groupId" -------------
	var groupId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "groupId", chi.URLParam(r, "groupId"), &groupId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "groupId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCompetitionsCompetitionIdGroupsGroupId(w, r, competitionId, groupId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetCompetitors operation middleware
func (siw *ServerInterfaceWrapper) GetCompetitors(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCompetitors(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostCompetitors operation middleware
func (siw *ServerInterfaceWrapper) PostCompetitors(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostCompetitors(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetCompetitorsAllCompetitionId operation middleware
func (siw *ServerInterfaceWrapper) GetCompetitorsAllCompetitionId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "competitionId" -------------
	var competitionId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "competitionId", chi.URLParam(r, "competitionId"), &competitionId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "competitionId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCompetitorsAllCompetitionId(w, r, competitionId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostCompetitorsAssignParticipant operation middleware
func (siw *ServerInterfaceWrapper) PostCompetitorsAssignParticipant(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostCompetitorsAssignParticipant(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostCompetitorsImport operation middleware
func (siw *ServerInterfaceWrapper) PostCompetitorsImport(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostCompetitorsImport(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PutCompetitorsCompetitorId operation middleware
func (siw *ServerInterfaceWrapper) PutCompetitorsCompetitorId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "competitorId" -------------
	var competitorId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "competitorId", chi.URLParam(r, "competitorId"), &competitorId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "competitorId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutCompetitorsCompetitorId(w, r, competitorId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetMatchesGroupIdAll operation middleware
func (siw *ServerInterfaceWrapper) GetMatchesGroupIdAll(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "groupId" -------------
	var groupId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "groupId", chi.URLParam(r, "groupId"), &groupId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "groupId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetMatchesGroupIdAll(w, r, groupId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetMatchesMatchId operation middleware
func (siw *ServerInterfaceWrapper) GetMatchesMatchId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "matchId" -------------
	var matchId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "matchId", chi.URLParam(r, "matchId"), &matchId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "matchId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetMatchesMatchId(w, r, matchId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/competitions", wrapper.GetCompetitions)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/competitions", wrapper.PostCompetitions)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/competitions/categories", wrapper.GetCompetitionsCategories)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/competitions/weapons", wrapper.GetCompetitionsWeapons)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/competitions/{competitionId}", wrapper.GetCompetitionsCompetitionId)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/competitions/{competitionId}/groups", wrapper.GetCompetitionsCompetitionIdGroups)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/competitions/{competitionId}/groups/{groupId}", wrapper.GetCompetitionsCompetitionIdGroupsGroupId)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/competitors", wrapper.GetCompetitors)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/competitors", wrapper.PostCompetitors)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/competitors/all/{competitionId}", wrapper.GetCompetitorsAllCompetitionId)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/competitors/assign-participant", wrapper.PostCompetitorsAssignParticipant)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/competitors/import", wrapper.PostCompetitorsImport)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/competitors/{competitorId}", wrapper.PutCompetitorsCompetitorId)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/matches/{groupId}/all", wrapper.GetMatchesGroupIdAll)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/matches/{matchId}", wrapper.GetMatchesMatchId)
	})

	return r
}
